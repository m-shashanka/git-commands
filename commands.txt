|| GIT SETUP ||

git config --global user.name <name>

git config --global user.email <email>

--------------------------------------------------------------------------------------------
|| GIT BASICS ||

git status

git add <file_names>

git commit -m <message>

//add to staging area and commit
git commit -a -m <message>

//modify the last commit
git commit --amend

git log --oneline

---------------------------------------------------------------------------------------------
|| GIT BRANCHES ||

//create new branch
git branch <branch_name>

//change branch to <branch>
git switch <branch>
git checkout <branch>

//create and change branch
git switch -c <branch>
git checkout -b <branch>

//delete branch iff it has been fully merged with upstream branch
git branch -d <branch>

//force delete branch irrespective of merge status
git branch -D <branch>

//rename the branch you are on currently
git branch -m <new_name>

--------------------------------------------------------------------------------------------
|| GIT MERGING ||

//call from receiving branch
git merge <branch>

--------------------------------------------------------------------------------------------
|| COMPARING CHANGES WITH GIT DIFF ||

//lists changes in our working directory that are not staged for next commit
git diff

//lists all changes (staged & unstaged) since last commit
git diff HEAD

//lists changes between staging area and our last commit
git diff --staged
git diff --cached

//list changes between tips of 2 branches or 2 commits
git diff <branch1> <branch2>
git diff <commit1> <commit2>

//list changes in specific files only (can be used with any of the above diff commands)
git diff HEAD <file_names>

---------------------------------------------------------------------------------------------
|| GIT STASHING ||

//stash/save all uncommited changes (staged & unstaged) in current branch before moving to another and revert the changes in working copy
git stash

//take the most recently stashed changes and appy them to working copy in any branch
git stash pop

//take the most recent changes and apply them to working copy without popping
git stash apply

//empty stash
git stash clear

---------------------------------------------------------------------------------------------
|| UNDOING CHANGES & TIME TRAVELING ||

//go back to some commit
git checkout <commit_hash>

//go back previous n commits
git checkout HEAD~n

//come back to where you left off
git switch -

//discard some changes in working directory by getting files from HEAD or HEAD~n
git checkout HEAD <file_names>
git checkout -- <file_names>
git restore <file_names>
git restore --source HEAD~2 <file_names>

//unstaging files
git restore --staged <file_names>

//get rid of all commits from head back to specified commit without changing the current working copy
git reset <commit_hash>

//remove commits and also update the current working copy
git reset --hard <commit_hash>

//similar to reset but doesn't get rid of commits, instead creates a new commit with reverted changes
git revert <commit_hash>

---------------------------------------------------------------------------------------------

